package main

import (
	"net/http"
	"strconv"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	_ "frosthand.com/boilerplate-golang/docs" // docs is generated by swag
	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// Researcher model
type Researcher struct {
	ID        uint      `gorm:"primaryKey" json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
	Age       int       `json:"age"`
}

// TableName tells GORM to use the singular "researcher" table
func (Researcher) TableName() string {
    return "researcher"
}

var db *gorm.DB

// @title Researcher API
// @version 1.0
// @description API for managing researchers
// @host localhost:8080
// @BasePath /
func main() {
	var err error
	dsn := "host=host.docker.internal user=frosthand_postgres_username password=frosthand_postgres_password dbname=frosthand_postgres_db port=5432 sslmode=disable TimeZone=UTC"
	db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Auto migrate Researcher model
	db.AutoMigrate(&Researcher{})

	r := gin.Default()

	// Enable CORS for all origins
	r.Use(cors.Default())

	// Swagger endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Researcher routes
	r.GET("/postgres/researcher", getResearchers)

	r.Run(":8080")
}

// @Summary Get list of researchers
// @Description Get paginated researchers with optional filtering and sorting
// @Tags researchers
// @Accept json
// @Produce json
// @Param page query int false "Page number" default(1)
// @Param page_size query int false "Page size" default(10)
// @Param sort_by query string false "Sort by column (id, name, age, created_at)" default(id)
// @Param ascending query bool false "Sort ascending?" default(true)
// @Param filter query string false "Filter by name (contains substring)"
// @Success 200 {object} map[string]interface{}
// @Router /postgres/researcher [get]
func getResearchers(c *gin.Context) {
	// Pagination
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	if page < 1 {
		page = 1
	}
	pageSize, _ := strconv.Atoi(c.DefaultQuery("pageSize", "10"))
	if pageSize < 1 {
		pageSize = 10
	}

	// Sorting
	sortBy := c.DefaultQuery("sortBy", "id")
	ascending := c.DefaultQuery("ascending", "true") == "true"

	// Filtering
	filter := c.Query("filter")

	var researchers []Researcher
	query := db.Model(&Researcher{})

	if filter != "" {
		query = query.Where("name ILIKE ?", "%"+filter+"%")
	}

	// Count total matching rows
	var total int64
	query.Count(&total)

	// Order clause safe mapping
	order := "id"
	switch sortBy {
	case "name", "age", "created_at":
		order = sortBy
	}
	if ascending {
		order += " ASC"
	} else {
		order += " DESC"
	}

	query.Order(order).
		Limit(pageSize).
		Offset((page - 1) * pageSize).
		Find(&researchers)

	c.JSON(http.StatusOK, gin.H{
		"data":  researchers,
		"totalCount": total,
	})
}
